{"ast":null,"code":"'use strict';\n\nvar JQL = require('jqljs');\n\nvar fieldsEnum = {\n  DISTRICT: 'd',\n  AMPHOE: 'a',\n  PROVINCE: 'p',\n  ZIPCODE: 'z'\n};\n/**\n * From jquery.Thailand.js line 30 - 128\n * Search result by FieldsType\n */\n\nvar preprocess = function preprocess(data) {\n  if (!data[0].length) {\n    // non-compacted database\n    return data;\n  } // compacted database in hierarchical form of:\n  // [[\"province\",[[\"amphur\",[[\"district\",[\"zip\"...]]...]]...]]...]\n\n\n  var expanded = [];\n  data.forEach(function (provinceEntry) {\n    var province = provinceEntry[0];\n    var amphurList = provinceEntry[1];\n    amphurList.forEach(function (amphurEntry) {\n      var amphur = amphurEntry[0];\n      var districtList = amphurEntry[1];\n      districtList.forEach(function (districtEntry) {\n        var district = districtEntry[0];\n        var zipCodeList = districtEntry[1];\n        zipCodeList.forEach(function (zipCode) {\n          expanded.push({\n            d: district,\n            a: amphur,\n            p: province,\n            z: zipCode\n          });\n        });\n      });\n    });\n  });\n  return expanded;\n};\n\nvar DB = new JQL(preprocess(require('../data.json')));\n\nvar resolveResultbyField = function resolveResultbyField(type, searchStr) {\n  var possibles = [];\n\n  try {\n    possibles = DB.select('*').where(type).match('^' + searchStr).orderBy(type).fetch();\n  } catch (e) {\n    return [];\n  }\n\n  return possibles;\n};\n\nexports.resolveResultbyField = resolveResultbyField;\nexports.fieldsEnum = fieldsEnum;","map":null,"metadata":{},"sourceType":"script"}