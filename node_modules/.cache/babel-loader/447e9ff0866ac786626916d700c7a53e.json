{"ast":null,"code":"/**\n * @name JQL.js\n * @version 1.0.3\n * @update Apr 16, 2017\n * @author Earthchie http://www.earthchie.com/\n * @license WTFPL v.2 - http://www.wtfpl.net/\n **/\nfunction JQL(obj) {\n  if (typeof obj === 'string') {\n    obj = JSON.parse(obj);\n  }\n\n  this.data_source = obj;\n  this.buffer = obj;\n  this.focused_field = '';\n  this.options = [];\n  this.size = false;\n\n  for (var key in obj) {\n    for (var field in obj[key]) {\n      this.options.push(field);\n    }\n\n    break;\n  }\n\n  this.fetch = function () {\n    if (typeof this.options === 'object') {\n      var _obj = {};\n\n      for (var i in this.buffer) {\n        _obj[i] = {};\n\n        for (var j in this.options) {\n          var _field = this.options[j];\n\n          if (this.buffer[i][_field]) {\n            _obj[i][_field] = this.buffer[i][_field];\n          }\n        }\n      }\n\n      this.buffer = _obj;\n    }\n\n    if (this.size) {\n      var temp = this.size.toString().split(',');\n      var start = 0;\n      var end = this.size;\n\n      if (temp.length > 1 && temp[0] < temp[1]) {\n        start = parseInt(temp[0]);\n        end = start + parseInt(temp[1]);\n      }\n\n      var _results = {};\n\n      for (var i = start; i < end; i++) {\n        if (this.buffer[i]) {\n          _results[i] = this.buffer[i];\n        } else {\n          break;\n        }\n      }\n\n      this.buffer = _results;\n    }\n\n    return this.buffer;\n  };\n\n  this.new = function (obj) {\n    this.data_source = obj;\n    this.buffer = obj;\n  };\n\n  this.limit = function (limit) {\n    this.size = limit;\n    return this;\n  };\n\n  this.select = function (filters) {\n    this.options = filters;\n\n    if (typeof filters === 'string' && filters !== '*') {\n      this.options = filters.split(',');\n    }\n\n    this.buffer = this.data_source;\n    this.size = false;\n    return this;\n  };\n\n  this.where = function (field) {\n    this.focused_field = field;\n    return this;\n  }; // sets of conditions\n\n\n  this.contains = function (str, caseSensitive) {\n    if (caseSensitive == undefined) {\n      caseSensitive == false;\n    }\n\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (caseSensitive) {\n        if (~obj[i][this.focused_field].indexOf(str)) {\n          this.buffer.push(obj[i]);\n        }\n      } else if (~obj[i][this.focused_field].toLowerCase().indexOf(str.toLowerCase())) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  };\n\n  this.match = function (regex, options) {\n    if (typeof regex === 'string' && regex !== '') {\n      options = options || 'ig';\n      regex = new RegExp(regex, options);\n      var _obj2 = this.buffer;\n      this.buffer = [];\n\n      for (var i in _obj2) {\n        regex.lastIndex = 0;\n\n        if (regex.exec(_obj2[i][this.focused_field])) {\n          this.buffer.push(_obj2[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  this.equalTo = function (val) {\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (obj[i][this.focused_field] == val) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  };\n\n  this.in = function (vals) {\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (this.in_array(obj[i][this.focused_field], vals)) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  };\n\n  this.moreThan = function (val) {\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (parseFloat(obj[i][this.focused_field]) > parseFloat(val)) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  };\n\n  this.moreThanOrEqualTo = function (val) {\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (parseFloat(obj[i][this.focused_field]) >= parseFloat(val)) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  };\n\n  this.lessThan = function (val) {\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (parseFloat(obj[i][this.focused_field]) < parseFloat(val)) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  };\n\n  this.lessThanOrEqualTo = function (val) {\n    var obj = this.buffer;\n    this.buffer = [];\n\n    for (var i in obj) {\n      if (parseFloat(obj[i][this.focused_field]) <= parseFloat(val)) {\n        this.buffer.push(obj[i]);\n      }\n    }\n\n    return this;\n  }; // end - set of conditions\n  // order\n\n\n  this.orderBy = function (field, mode) {\n    var sequence = 'asc';\n    var target = field.split(' ');\n    var temp = target.pop();\n\n    if (temp && temp.toLowerCase() == 'desc') {\n      sequence = 'desc';\n      field = target.join(' ');\n    } // prepare object\n\n\n    var obj = [];\n\n    for (var i in this.buffer) {\n      obj.push([i, this.buffer[i][field]]);\n    }\n\n    if (obj.length < 2) {\n      return this;\n    }\n\n    if (mode == undefined && isNaN(obj[0][1])) {\n      mode = 'string';\n    } else {\n      mode = 'numeric';\n    }\n\n    if (mode == 'string') {\n      obj.sort(function (a, b) {\n        if (a[1] < b[1]) return -1;\n        if (a[1] > b[1]) return 1;\n        return 0;\n      });\n    } else {\n      obj.sort(function (a, b) {\n        return a[1] - b[1];\n      });\n    }\n\n    results = [];\n\n    for (var i in obj) {\n      results.push(this.buffer[obj[i][0]]);\n    }\n\n    this.buffer = results;\n\n    if (sequence == 'desc') {\n      this.buffer = this.buffer.reverse();\n    }\n\n    return this;\n  }; // alias\n\n\n  this.and = this.where;\n  this.is = this.equalTo; // helper\n\n  this.in_array = function (val, list) {\n    for (var i in list) {\n      if (val == list[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = JQL;\n}","map":null,"metadata":{},"sourceType":"script"}